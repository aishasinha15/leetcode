//using has

class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode*> mp;
        if(head==NULL)
        return false;
        while(head!=NULL){
            if(mp.find(head)!=mp.end())
            return true;

            mp.insert(head);
            head=head->next;
        }
        return false;
    }
};



//using LL


ListNode *slow_p = head, *fast_p = head;
 
    while (slow_p && fast_p && fast_p->next) {
        slow_p = slow_p->next;
        fast_p = fast_p->next->next;
        if (slow_p == fast_p) {
            return 1;
        }
    }
    return 0;
    }
