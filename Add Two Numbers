class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry=0,sum;
        ListNode* h1 = new ListNode();
        ListNode* l3=  new ListNode();
        if((l1->val +l2->val)>=10){
            l3->val = (l1->val +l2->val)%10;
            carry=1;
        }
        else{
            l3->val = (l1->val +l2->val);
        }
        h1=l3;
        l1=l1->next;
        l2=l2->next;
        while(l1!=NULL && l2!=NULL){
            if(carry==0)
            sum= l1->val + l2->val;
            else{
            sum= l1->val + l2->val + carry;
            carry=0;
            }

            if(sum>=10){
            sum=sum%10;
            carry= 1;
            }
        

            l1= l1->next;
            l2= l2->next;
            
            ListNode* pmt = new ListNode(sum);
            l3->next=pmt;
            l3=l3->next;
        }
         while(l1!=NULL){
            if(carry!=0){
                l1->val+= carry;
                carry=0;
            }
            if(l1->val >=10){
                l1->val=  (l1->val) %10;
                carry=1;
            }
            
            

             ListNode* pmt = new ListNode(l1->val);
            l3->next=pmt;
            l3=l3->next;
            l1=l1->next;
            cout<<" done"<<endl;
        }

        while(l2!=NULL){
             if(carry!=0){
                l2->val+= carry;
                carry=0;
            }
             if(l2->val >=10){
                l2->val=  (l2->val) %10;
                carry=1;
            }

             

             ListNode* pmt = new ListNode(l2->val);
            l3->next=pmt;
            l3=l3->next;
            l2=l2->next;
            cout<<"here"<<endl;
          
        }
         if(carry==1){
             ListNode* pmt = new ListNode(carry);
            l3->next=pmt;
            l3=l3->next; 
         }
        return h1;
    }
};
